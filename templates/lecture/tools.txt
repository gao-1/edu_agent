附：graphviz基础语法：

---

## **有向图（Directed Graph）**
```python
from graphviz import Digraph

dot = Digraph()

dot.edge('A', 'B')
dot.edge('B', 'C')
dot.edge('C', 'A')

dot.render('directed_graph', format='png', view=True)
```

---

## **无向图（Undirected Graph）**
```python
from graphviz import Graph

g = Graph()

g.edge('A', 'B')
g.edge('B', 'C')
g.edge('C', 'A')

g.render('undirected_graph', format='png', view=True)
```

---

## **树结构**
```python
dot = Digraph()

dot.node('A', '根节点')
dot.node('B', '子节点1')
dot.node('C', '子节点2')
dot.node('D', '叶子1')
dot.node('E', '叶子2')

dot.edge('A', 'B')
dot.edge('A', 'C')
dot.edge('B', 'D')
dot.edge('B', 'E')

dot.render('tree_graph', format='png', view=True)
```

---

## **状态机**
```python
dot = Digraph()

dot.node('S', 'Start', shape='circle', style='filled', fillcolor='green')
dot.node('A', 'Running')
dot.node('B', 'Error', shape='doublecircle', style='filled', fillcolor='red')
dot.node('C', 'Completed', shape='doublecircle', style='filled', fillcolor='blue')

dot.edge('S', 'A')
dot.edge('A', 'B', label='Error')
dot.edge('A', 'C', label='Success')
dot.edge('B', 'S', label='Retry')

dot.render('state_machine', format='png', view=True)
```

---

## **组织结构图**
```python
dot = Digraph()

dot.node('CEO', 'CEO', shape='box', style='filled', fillcolor='lightblue')
dot.node('CTO', 'CTO', shape='box')
dot.node('CFO', 'CFO', shape='box')
dot.node('Engineer1', '工程师1', shape='ellipse')
dot.node('Engineer2', '工程师2', shape='ellipse')
dot.node('Accountant', '会计', shape='ellipse')

dot.edge('CEO', 'CTO')
dot.edge('CEO', 'CFO')
dot.edge('CTO', 'Engineer1')
dot.edge('CTO', 'Engineer2')
dot.edge('CFO', 'Accountant')

dot.render('organization_chart', format='png', view=True)
```

---

## **UML 类图**
```python
dot = Digraph()

dot.node('Person', '{{Person|+name;+age|+getInfo()}}', shape='record')
dot.node('Student', '{{Student|+grade|+study()}}', shape='record')
dot.node('Teacher', '{{Teacher|+subject|+teach()}}', shape='record')

dot.edge('Person', 'Student', arrowhead='empty')
dot.edge('Person', 'Teacher', arrowhead='empty')

dot.render('uml_class_diagram', format='png', view=True)
```

---

## **网络拓扑图**
```python
g = Graph()

g.node('Router', '路由器', shape='doublecircle', style='filled', fillcolor='gray')
g.node('Switch1', '交换机1', shape='box', style='filled', fillcolor='lightblue')
g.node('Switch2', '交换机2', shape='box', style='filled', fillcolor='lightblue')
g.node('PC1', 'PC1', shape='ellipse')
g.node('PC2', 'PC2', shape='ellipse')
g.node('PC3', 'PC3', shape='ellipse')
g.node('PC4', 'PC4', shape='ellipse')

g.edge('Router', 'Switch1')
g.edge('Router', 'Switch2')
g.edge('Switch1', 'PC1')
g.edge('Switch1', 'PC2')
g.edge('Switch2', 'PC3')
g.edge('Switch2', 'PC4')

g.render('network_topology', format='png', view=True)
```

---

## **流程图**
```python
dot = Digraph()

dot.node('A', '开始', shape='oval', style='filled', fillcolor='green')
dot.node('B', '输入数据', shape='parallelogram', style='filled', fillcolor='lightblue')
dot.node('C', '处理数据', shape='box', style='filled', fillcolor='lightyellow')
dot.node('D', '条件检查', shape='diamond', style='filled', fillcolor='orange')
dot.node('E', '输出结果', shape='parallelogram', style='filled', fillcolor='lightblue')
dot.node('F', '结束', shape='oval', style='filled', fillcolor='red')

dot.edge('A', 'B')
dot.edge('B', 'C')
dot.edge('C', 'D')
dot.edge('D', 'E', label='是')
dot.edge('D', 'C', label='否')
dot.edge('E', 'F')

dot.render('flowchart', format='png', view=True)
```

---

### **总结**
| **类别** | **Python 代码文件名** |
|---------|-----------------|
| 有向图 | `directed_graph.png` |
| 无向图 | `undirected_graph.png` |
| 树结构 | `tree_graph.png` |
| 状态机 | `state_machine.png` |
| 组织架构图 | `organization_chart.png` |
| UML 类图 | `uml_class_diagram.png` |
| 网络拓扑图 | `network_topology.png` |
| 流程图 | `flowchart.png` |

附：matplotlib使用方法
---

## **绘制基本函数**
### **线性函数**
```python
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-10, 10, 400)
y = 2 * x + 3  # 线性方程 y = 2x + 3

plt.plot(x, y, label=r"$y = 2x + 3$")
plt.axhline(0, color='black', linewidth=1)  # x 轴
plt.axvline(0, color='black', linewidth=1)  # y 轴
plt.legend()
plt.grid()
plt.title("线性函数")
plt.show()
```

---

### **二次函数**
```python
y = x**2 - 4*x + 2  # 二次函数 y = x^2 - 4x + 2

plt.plot(x, y, label=r"$y = x^2 - 4x + 2$")
plt.axhline(0, color='black', linewidth=1)
plt.axvline(0, color='black', linewidth=1)
plt.legend()
plt.grid()
plt.title("二次函数")
plt.show()
```

---

### **三角函数**
```python
y1 = np.sin(x)
y2 = np.cos(x)

plt.plot(x, y1, label=r"$y = \sin(x)$")
plt.plot(x, y2, label=r"$y = \cos(x)$", linestyle='dashed')

plt.axhline(0, color='black', linewidth=1)
plt.axvline(0, color='black', linewidth=1)
plt.legend()
plt.grid()
plt.title("三角函数")
plt.show()
```

---

## **其他函数**
### **指数 & 对数函数**
```python
y_exp = np.exp(x / 5)  # 指数函数 e^(x/5)
y_log = np.log(x[x > 0])  # 取 x > 0 避免 log 负值问题

plt.plot(x, y_exp, label=r"$y = e^{x/5}$")
plt.plot(x[x > 0], y_log, label=r"$y = \ln(x)$", linestyle='dashed')

plt.axhline(0, color='black', linewidth=1)
plt.axvline(0, color='black', linewidth=1)
plt.legend()
plt.grid()
plt.title("指数 & 对数函数")
plt.show()
```

---

### ** 隐函数**
**方程：** \( x^2 + y^2 = 9 \) （圆的方程）  
```python
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-3, 3, 400)
y = np.sqrt(9 - x**2)  # 正半圆
y_neg = -np.sqrt(9 - x**2)  # 负半圆

plt.plot(x, y, 'b', label=r"$x^2 + y^2 = 9$")
plt.plot(x, y_neg, 'b')

plt.axhline(0, color='black', linewidth=1)
plt.axvline(0, color='black', linewidth=1)
plt.legend()
plt.grid()
plt.title("隐函数（圆）")
plt.show()
```

---

## **极坐标函数**
### **玫瑰曲线**
**方程：** \( r = \cos(4\theta) \)  
```python
theta = np.linspace(0, 2*np.pi, 1000)
r = np.cos(4 * theta)

plt.polar(theta, r)
plt.title("极坐标函数：玫瑰曲线")
plt.show()
```

---

### **阿基米德螺旋**
**方程：** \( r = \theta \)  
```python
r = theta

plt.polar(theta, r)
plt.title("极坐标函数：阿基米德螺旋")
plt.show()
```

---

## **参数方程**
### ** 圆**
```python
t = np.linspace(0, 2*np.pi, 400)
x = 3 * np.cos(t)
y = 3 * np.sin(t)

plt.plot(x, y)
plt.axhline(0, color='black', linewidth=1)
plt.axvline(0, color='black', linewidth=1)
plt.grid()
plt.title("参数方程（圆）")
plt.show()
```

---

### ** 心形线**
```python
x = 16 * np.sin(t)**3
y = 13 * np.cos(t) - 5 * np.cos(2*t) - 2 * np.cos(3*t) - np.cos(4*t)

plt.plot(x, y, 'r')
plt.axis("equal")
plt.title("心形曲线")
plt.show()
```

---

## **3D 曲面图**
### **三维曲面**
```python
from mpl_toolkits.mplot3d import Axes3D

X = np.linspace(-5, 5, 50)
Y = np.linspace(-5, 5, 50)
X, Y = np.meshgrid(X, Y)
Z = np.sin(np.sqrt(X**2 + Y**2))

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap="viridis")

plt.title("3D 曲面图")
plt.show()
```

---

## **等高线图**
```python
X = np.linspace(-5, 5, 100)
Y = np.linspace(-5, 5, 100)
X, Y = np.meshgrid(X, Y)
Z = np.sin(np.sqrt(X**2 + Y**2))

plt.contourf(X, Y, Z, levels=20, cmap="viridis")
plt.colorbar()
plt.title("等高线图")
plt.show()
```

---

## **总结**
| **函数类型** | **示例代码** |
|------------|------------|
| **线性函数** | `y = 2x + 3` |
| **二次函数** | `y = x^2 - 4x + 2` |
| **三角函数** | `y = sin(x), cos(x)` |
| **指数 & 对数** | `y = e^x, ln(x)` |
| **隐函数** | `x^2 + y^2 = 9` |
| **极坐标** | `r = cos(4θ), r = θ` |
| **参数方程** | `心形曲线, 圆` |
| **3D 曲面图** | `sin(sqrt(x^2 + y^2))` |
| **等高线图** | `等高线绘制` |
